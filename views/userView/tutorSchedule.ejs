<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>

    <!-- The included template contains all the links, JS and Styling files to be included in the pages, to alter the contents please refer to templates/included.html file -->
    <% include ../templates/included.html %>

    <style>
        .available {
            background-color: #666672;
            color: white;
        }

        .editing {
            background-color: pink;
            color: white;
        }

        .deleting {
            background-color: #dd1188;
            color: white;
        }

        .booked {
            background-color: #e6989b;
            color: white;
        }

        .clickButton {
            background-color: #4CAF50;
            color: white;
        }

        .unclickButton {
            background-color: transparent;
            color: black;
        }
    </style>

</head>

<body>

<!--The navbar template included below, to alter the contents please refer to templates/navbar.ejs file-->
<% include ../templates/navbar.ejs %>

<div class="ui center aligned container">

    <div class="ui info modal">
        <div class="content" id="info"></div>


    </div>


    <h1 align="center"><%= userDetails %>'s weekly schedule</h1>
    <div class="ui center aligned container">
        <div class="column">
            <button class="icon button" id="button2" style="border: none">
                <i class="chevron left icon"></i>
            </button>
            <button class="icon button" id="button1" style="border: none">
                <i class="chevron right icon"></i></button>
        </div>

        <div class="column" style="padding: 10px">
            <div class="ui buttons" >
                <button class="ui button unclickButton" id="edit" onclick="editCalendar()" >Edit</button>
                <div class="or"></div>
                <button class="ui positive button" id="save" onclick="saveCalendar()">Save</button>
            </div>
        </div>
    </div>

    <div class="ui container" style="padding: 20px">
        <table id="scheduleTable" class="ui orange celled table calendar" align="center">
            <thead>
            <tr>
                <th>Time</th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
                <th>Saturday</th>
                <th>Sunday</th>
            </tr>
            </thead>
        </table>
    </div>
</div>

</body>


<!--This is the script to load semantic model content from another webpage-->

<script>
    $(function () {
        $('.info-modal-link').each(function () {
            $(this).on('click', function (e) {
                e.preventDefault();
                var url = $(this).attr('href');
                $.get(url, function (data) {
                    $('.info.modal .content').html(data);
                    $(".info.modal").modal({closable: true, observeChanges: true}).modal('show');
                });
            });
        });
    });
</script>

<script src="/socket.io/socket.io.js"></script>
<script>


    const tuteeBoolean = "<%= sess.tuteeBoolean %>";
    if (typeof tuteeBoolean !== "undefined" && tuteeBoolean !== "" && tuteeBoolean === "true"){
        console.log("This is tutee");
    }

    var ListOfDates = [];
    var ListToDelete = [];
    const userName = "<%= userDetails %>";

    const course = ("<%= value.course %>").split(",");
    console.log(course);

    const tuteeName = ("<%= value.tutee %>").split(",");
    console.log(tuteeName);

    const bookingLocation = ("<%= value.location %>").split(",");
    console.log(bookingLocation);

    const bookingID = ("<%= value.bookingID %>").split(",");
    console.log(bookingID);

    const bookingDetails = bookingDetailJSON(tuteeName, course, bookingLocation, bookingID);

    //console.log(BookingDetails);

    function bookingDetailJSON(tutee, course, location, bookingID) {
        var bookingDetail = [];
        for (var i = 0; i < course.length; i++) {
            const myJSON = {tutee: tutee[i], course: course[i], location: location[i], bookingID: bookingID[i]}
            bookingDetail.push(myJSON)
        }
        return bookingDetail;
    }

    //rendering calendar
    var cale = document.getElementsByClassName("calendar")[0];
    for (var i = 1; i < 24; i++) {
        var newRow = document.createElement('tr');
        var fsttd = document.createElement('td');
        fsttd.innerHTML = i + ':00';
        newRow.appendChild(document.createElement('td').appendChild(fsttd));
        for (var j = 1; j < 8; j++) {

            var newtd = document.createElement('td');
            newtd.id = j + "." + i;
            newtd.className = "empty";
            newtd.innerHTML = "..";
            // newtd.onclick = onClickOfTD();
            newtd.addEventListener("click", onClickOfTD);
            newRow.appendChild(newtd);
        }
        cale.appendChild(newRow);
    }

    var date = new Date();
    console.log("date " + date);
    var day = new Date(date.getFullYear(), (date.getMonth()), date.getDate());
    console.log("day " + day);
    const weekdays = $("tbody th");
    const table = $("#scheduleTable")[0];
    const availableTime = ("<%= value.availableTime %>").split(",");
    //list of jsons {Time: date, id: BookingId}
    const bookingTime = ("<%= value.bookedTime %>").split(",");
    //console.log(bookingTime);
    renderDays();

    var weeklisting = preRenderWeeks(date, availableTime, "available");

    //console.log(weeklisting);
    var weeklisting1 = preRenderWeeks(date, bookingTime, "booked", bookingDetails);

    $("#button1").on("click", function () {
        $(table).fadeOut("fast", function () {
            day = new Date(day.getFullYear(), day.getMonth(), (day.getDate() + 7));
            if (typeof tuteeBoolean !== "undefined" && tuteeBoolean !== "" && tuteeBoolean === "true"){
                console.log("This is tutee");
                socket.emit('nextnextweek', {userName: userName, day: day, tuteeBoolean: true});
            }else{
                socket.emit('nextnextweek', {userName: userName, day: day, tuteeBoolean: false});
            }
            socket.on('nextnextweek', function (value) {
                // weeklisting.weeknext = value
                renderDays()
                const bookingDetailsFornextWeek = bookingDetailJSON(value.tutee, value.course, value.location, value.bookingID)
                weeklisting = preRenderWeeks(day, value.availableTime, "available")
                weeklisting1 = preRenderWeeks(day, value.bookedTime, "booked", bookingDetailsFornextWeek)
                // switchingWeeks(weeklisting.availableTime)
                $(table).fadeIn("fast", function () {
                })
            })
        })
    });

    $("#button2").on("click", function () {
        $(table).fadeOut("fast", function () {
            day = new Date(day.getFullYear(), day.getMonth(), (day.getDate() - 7));
            //console.log(day)
            if (typeof tuteeBoolean !== "undefined" && tuteeBoolean !== "" && tuteeBoolean === "true"){
                console.log("This is tutee");
                socket.emit('lastlastweek', {userName: userName, day: day, tuteeBoolean: true});
            }else{
                socket.emit('lastlastweek', {userName: userName, day: day, tuteeBoolean: false});
            }
            socket.on('lastlastweek', function (value) {
                renderDays()
                const bookingDetailsFornextWeek = bookingDetailJSON(value.tutee, value.course, value.location, value.bookingID)
                weeklisting = preRenderWeeks(day, value.availableTime, "available")
                weeklisting1 = preRenderWeeks(day, value.bookedTime, "booked", bookingDetailsFornextWeek)

                $(table).fadeIn("fast", function () {
                })
            })
        })
    });

    function switch12(num) {
        if (num === 0) {
            num = 12
        }
        return num;
    }

    function switch7(num) {
        if (num === 0) {
            num = 7
        }
        return num;
    }

    function preRenderWeeks(date, timing, className, bookingDetails) {
        console.log("BookingDetails");
        console.log(bookingDetails)
        var weekListing = []

        timing.map(function (value) {

            if (value !== "") {
                value = new Date(value)
                value.setTime(value.getTime() + value.getTimezoneOffset() * 60 * 1000);
                weekListing.push(value)
            }
        })

        switchingWeeks(weekListing, className, bookingDetails);
        return weekListing;
    }

    function renderDays() {
        var availableTimeCells = document.getElementsByClassName("available");
        var bookedTimeCells = document.getElementsByClassName("booked");
        while (availableTimeCells.length > 0 || bookedTimeCells.length > 0) {
            for (var aCells = 0; aCells < availableTimeCells.length; aCells++) {
                availableTimeCells[aCells].className = "empty";
            }
            availableTimeCells = document.getElementsByClassName("available");
            for (var bCells = 0; bCells < bookedTimeCells.length; bCells++) {
                bookedTimeCells[bCells].innerHTML = ".."
                bookedTimeCells[bCells].className = "empty";
            }
            bookedTimeCells = document.getElementsByClassName("booked");
        }

        for (var i = 1; i < weekdays.length; i++) {
            // date + i - day.weekday
            var d = new Date(day.getFullYear(), day.getMonth(), (day.getDate() + i - day.getDay()));
            // thisWeekDays.push({year:d.getFullYear(), month: d.getMonth(), date: d.getDate()});
            var counterDay = {
                weekDay: d.getDay(),
                date: d.getDate(),
                month: switch12(d.getMonth() + 1),
                year: d.getFullYear()
            };

            var weekDayString;

            switch (counterDay.weekDay) {
                case 1:
                    weekDayString = "Monday"
                    break;
                case 2:
                    weekDayString = "Tuesday"
                    break;
                case 3:
                    weekDayString = "Wednesday"
                    break;
                case 4:
                    weekDayString = "Thursday"
                    break;
                case 5:
                    weekDayString = "Friday"
                    break;
                case 6:
                    weekDayString = "Saturday"
                    break;
                case 0:
                    weekDayString = "Sunday"
                    break;
            }
            weekdays[i].innerHTML = switch7(weekDayString) + "<br>" + counterDay.date + "/" + counterDay.month;
        }
    }

    function switchingWeeks(msg, className, bookingDetail) {
        //renderDays()

        if (msg.length > 0) {
            for (var i = 0; i < msg.length; i++) {
                const value = msg[i]
                const selectedTime = document.getElementById(((value.getDay() === 0) ? 7 : value.getDay()) + "." + value.getHours());
                selectedTime.className = className;
                if (bookingDetail !== undefined) {
                    console.log(bookingDetail)
                    selectedTime.innerHTML = "<a href='/user/tutorBooking?bookingID=" + bookingDetail[i].bookingID + "' id='myDetail' class='info-modal-link'>" + bookingDetail[i].course + "<br>" + "Tutee: " + bookingDetail[i].tutee + "<br>" + "Location: " + bookingDetail[i].location + "</a>";
                }
            }
        }
    }

    //made a socket based on the http/ url address hence it is app.js
    var socket = io('http://localhost:3000/');
    // the on connect is going to trigger the .on('connection') for the backend IO.
    socket.on('connect', function () {
    })
    socket.on('disconnect', function () {
    });

    var edit = false;

    function editCalendar() {
        document.getElementById('edit').className = 'clickButton';
        edit = !edit;
        if (edit) {
            document.getElementById("button2").style.display = 'none';
            document.getElementById("button1").style.display = 'none';
        }
    }

    function saveCalendar() {
        if (edit === true) {
            //Get the List then socket emit
            if (ListOfDates.length > 0) {
                socket.emit("insertTime", {date: ListOfDates, userName: userName});
                socket.on("insertTime", function (msg) {
                    console.log(ListOfDates);
                    for (var i = 0; i < ListOfDates.length; i++) {
                        ListOfDates[i] = new Date(ListOfDates[i]);
                        ListOfDates[i].setTime(ListOfDates[i].getTime() + ListOfDates[i].getTimezoneOffset() * 60 * 1000);
                        const daies = (ListOfDates[i].getDay() === 0) ? 7 : ListOfDates[i].getDay()
                        const idClassName = daies + "." + ListOfDates[i].getHours();
                        console.log(idClassName)
                        document.getElementById(idClassName).className = "available";
                    }
                    ListOfDates = [];
                })
            }
            if (ListToDelete.length > 0) {
                socket.emit("deleteTime", {date: ListToDelete, userName: userName});
                socket.on("deleteTime", function (msg) {
                    for (var i = 0; i < ListToDelete.length; i++) {
                        ListToDelete[i] = new Date(ListToDelete[i]);
                        ListToDelete[i].setTime(ListToDelete[i].getTime() + ListToDelete[i].getTimezoneOffset() * 60 * 1000);
                        const daies = (ListToDelete[i].getDay() === 0) ? 7 : ListToDelete[i].getDay()
                        const idClassName = daies + "." + ListToDelete[i].getHours();
                        //console.log(idClassName)
                        document.getElementById(idClassName).className = "empty";
                        //console.log("deleting")
                    }
                    ListToDelete = [];
                })
            }
        }
        document.getElementById('edit').className = 'unclickButton';
        edit = false;
        document.getElementById("button2").style.display = '';
        document.getElementById("button1").style.display = '';
    }

    function onClickOfTD() {
        var classname = this.className;
        const classId = this.id.split(".")
        const classIdDay = classId[0]
        const classIdHour = classId[1]

        var Clickdate = new Date(day.getFullYear(), day.getMonth(), (day.getDate() - (day.getDay()) + classIdDay * 1), classIdHour);
        Clickdate.setTime(Clickdate.getTime() - Clickdate.getTimezoneOffset() * 60 * 1000);
        //
        if (edit === true) {
            if (classname === "empty") {
                document.getElementById(this.id).className = "editing";
                ListOfDates.push(String(Clickdate));
            }
            else if (classname === "editing") {
                document.getElementById(this.id).className = 'empty';
                const numbering = (ListOfDates.indexOf(String(Clickdate)));
                ListOfDates.splice(numbering, 1);
            }
            else if (classname === "available") {
                document.getElementById(this.id).className = 'deleting';
                ListToDelete.push(String(Clickdate));
            }
            else if (classname === "deleting") {
                document.getElementById(this.id).className = "available";
                const numbering = (ListToDelete.indexOf(String(Clickdate)));
                ListToDelete.splice(numbering, 1);
            }

        } else {
            if (classname === "booked") {

            }
        }
    }




</script>
</html>