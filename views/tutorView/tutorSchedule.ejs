<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css" rel="stylesheet"
          type="text/css"/>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.4/semantic.min.css" rel="stylesheet"
          type="text/css"/>
    <link href="https://cdn.rawgit.com/mdehoog/Semantic-UI-Calendar/76959c6f7d33a527b49be76789e984a0a407350b/dist/calendar.min.css"
          rel="stylesheet" type="text/css"/>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
          integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-2.1.4.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.4/semantic.min.js"></script>
    <script src="https://cdn.rawgit.com/mdehoog/Semantic-UI-Calendar/76959c6f7d33a527b49be76789e984a0a407350b/dist/calendar.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css"
          integrity="sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb" crossorigin="anonymous">
    <style>
        table {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            width: 80%;

        }

        td, th {
            border: 1px solid #dddddd;
            text-align: center;
            padding: 8px;
            width: 10%;
            height: 50px;
        }

        .available {
            background-color: #666672;
            color: white;
        }

        .booked {
            background-color: #d14c4c;
            color: white;
        }
    </style>


</head>
<body>
<h1 align="center">Tutor's weekly schedule</h1>
<div align="center">
    <button id="button2"> <</button>
    <button id="button1"> ></button>

</div>
<br>
<div>
    <table id="scheduleTable" class="calendar" align="center">
        <tbody>
        <tr>
            <th>Time</th>
            <th>Monday</th>
            <th>Tuesday</th>
            <th>Wednesday</th>
            <th>Thursday</th>
            <th>Friday</th>
            <th>Saturday</th>
            <th>Sunday</th>
        </tr>
        </tbody>
    </table>
</div>
</body>

<script src="/socket.io/socket.io.js"></script>
<script>
    var cale = document.getElementsByClassName("calendar")[0];
    for (var i = 1; i < 24; i++) {
        var newRow = document.createElement('tr');
        var fsttd = document.createElement('td');
        fsttd.innerHTML = i + ':00';
        newRow.appendChild(document.createElement('td').appendChild(fsttd));
        for (var j = 1; j < 8; j++) {

            var newtd = document.createElement('td');
            newtd.id = j + "." + i;
            newtd.className = "empty";
            newtd.innerHTML = "..";
            newRow.appendChild(newtd);
        }
        cale.appendChild(newRow);
    }

    const table = $("#scheduleTable")[0];
    console.log(table);
    var date = new Date();
    var day = new Date(date.getFullYear(), (date.getMonth()), date.getDate());
    const weekdays = $("tbody th");
    var counter = 0;
    const sevendays = 7;

    function renderDays() {
        // var thisWeekDays = [];
        // document.getElementsByClassName("available").map(function (value) {
        //     value.className = "empty";
        // });
        const availableTimeCells = document.getElementsByClassName("available");
        console.log(document.getElementsByClassName("available"));

        for (var aCells = 0 ;aCells <availableTimeCells.length;aCells++){
           availableTimeCells[aCells].className = "empty";
        }

        for (var i = 1; i < weekdays.length; i++) {
            // date + i - day.weekday
            var d = new Date(day.getFullYear(), day.getMonth(), (day.getDate() + i - day.getDay()));
            // thisWeekDays.push({year:d.getFullYear(), month: d.getMonth(), date: d.getDate()});
            var counterDay = {
                weekDay: d.getDay(),
                date: d.getDate(),
                month: switch12(d.getMonth() + 1),
                year: d.getFullYear()
            };

            var weekDayString;

            switch (counterDay.weekDay) {
                case 1:
                    weekDayString = "Monday"
                    break;
                case 2:
                    weekDayString = "Tuesday"
                    break;
                case 3:
                    weekDayString = "Wednesday"
                    break;
                case 4:
                    weekDayString = "Thursday"
                    break;
                case 5:
                    weekDayString = "Friday"
                    break;
                case 6:
                    weekDayString = "Saturday"
                    break;
                case 0:
                    weekDayString = "Sunday"
                    break;
            }
            weekdays[i].innerHTML = switch7(weekDayString) + "<br>" + counterDay.date + "/" + counterDay.month;
        }
        // return thisWeekDays;
    }

    renderDays();


    $("#button1").on("click", function () {
        $(table).fadeOut("fast", function () {
            $(table).fadeIn("fast", function () {
                counter++;
                day = new Date(day.getFullYear(), day.getMonth(), (day.getDate() + 7));
                renderDays();
                socket.emit('today', {date: day});

            })
        })
    });

    function switch12(num) {
        if (num === 0) {
            num = 12
        }
        return num;
    }

    function switch7(num) {
        if (num === 0) {
            num = 7
        }
        return num;
    }

    $("#button2").on("click", function () {
        $(table).fadeOut("fast", function () {
            $(table).fadeIn("fast", function () {
                counter++;
                day = new Date(day.getFullYear(), day.getMonth(), (day.getDate() - 7));
                renderDays();
                socket.emit('today', {date: day});

            })
        })
    });

    //made a socket based on the http/ url address hence it is app.js
    var socket = io('http://localhost:3000/');
    // the on connect is going to trigger the .on('connection') for the backend IO.
    socket.on('connect', function () {
        console.log("connecting");
        // this allow custom emitting based on 'today' and with a JSON. If needed use new Date +7/-7 for next or the week before.
        socket.emit('today', {date: new Date()});
        //this is the return emittion from the backend to client speifically named as return with JSON object.
        socket.on('return', function (msg) {
            msg.map(function (value) {
                // if (thisWeekDay.includes({year:value.timeStart.year, month: value.timeStart.month, date: value.timeStart.date})){
                //     console.log(value);
                //     console.log("contains");
                // }
                console.log(value);
                const selectedTime = document.getElementById(value.timeStart.day + "." + value.timeStart.hour);
                selectedTime.className = "available";
                console.log(selectedTime +"WTF");
            })
        })
    })
    socket.on('disconnect', function () {
    });

</script>
</html>